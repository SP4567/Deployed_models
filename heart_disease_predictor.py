# -*- coding: utf-8 -*-
"""Heart_Disease_Predictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RQAzG7oUZDn-jRG2vsIBtu2IcJr5nUoF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.models import load_model
from sklearn.metrics import confusion_matrix, classification_report

h = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Heart Disease data.csv")

h.head()

h.info()

h.describe().transpose()

sns.countplot(x = "target", data = h)
print("1: Heart Disease present")
print("0: Heart Disease absent")

sns.countplot(x = "target", data = h, hue = 'sex')
print("sex:\n 1:Male \n 0:Female")
print("target:\n 1: Heart Disease present \n 0: Heart Disease absent ")

h['target'].value_counts()

h['sex'].value_counts()

plt.figure(figsize = (12,5))
sns.heatmap(h.corr(), annot = True)

sns.violinplot(x = 'age', data = h)

sns.boxplot(x = 'target', y = 'thalach', data = h, hue = 'sex')

plt.figure(figsize = (12,8))
sns.histplot(h['age'], color = 'b',kde = True, bins = 50)

sns.countplot(x = 'cp', data = h, hue = 'sex')

sns.countplot(x = 'restecg', data = h, hue = 'sex')

sns.countplot(x = 'restecg', data = h, hue = 'age')

X = h.drop('target', axis = 1)
y = h[['target']]

X

y

Scaler = MinMaxScaler()
X_scaled = Scaler.fit_transform(X)
y_scaled = Scaler.fit_transform(y)

X_scaled.shape

y_scaled.shape

print("X_scaled values:\n", X_scaled)
print("y_scaled values:\n", y_scaled)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = 0.2)

print(X_train.shape)
print(y_train.shape)
print(X_test.shape)
print(y_test.shape)

Classifier_model = tf.keras.models.Sequential([Dense(64, activation = 'relu', input_shape = (13,)),
                                               Dense(32, activation = 'relu'),
                                               Dense(32, activation = 'relu'),
                                               Dense(16, activation = 'relu'),
                                               Dense(16, activation = 'relu'),
                                               Dense(8, activation = 'relu'),
                                               Dense(1, activation = 'sigmoid')])
Classifier_model.summary()

Classifier_model.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
es = EarlyStopping(monitor = 'val_loss', patience = 2)
Classifier_model.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 25, callbacks = [es])

hist = Classifier_model.history.history
new_hist = pd.DataFrame(hist)
new_hist.plot()

y_test_predict = Classifier_model.predict(X_test)
y_train_predict = Classifier_model.predict(X_train)

y_test_predict = y_test_predict > 0.5
y_train_predict = y_train_predict > 0.5

cm = confusion_matrix(y_test_predict, y_test)
cm2 = confusion_matrix(y_train_predict, y_train)

sns.heatmap(cm, annot = True)

sns.heatmap(cm2, annot = True)

print("Training Report:\n", classification_report(y_test_predict, y_test))
print("Testing Report:\n", classification_report(y_train_predict, y_train))

Classifier_model.save("Heart_Disease_Predictor.h5")

import pickle
pickle.dump(Scaler,open("scaler.pkl", "wb"))

X.columns

model = load_model("Heart_Disease_Predictor.h5")

def return_prediction(model, Scaler, sample_json):
  a = sample_json['age']
  s = sample_json['sex']
  c = sample_json['trestbps']
  o = sample_json['chol']
  f = sample_json['fbs']
  r = sample_json['restecg']
  t = sample_json['thalach']
  e = sample_json['exang']
  p = sample_json['oldpeak']
  st = sample_json['slope']
  cc = sample_json['ca']
  l = sample_json['thal']
  dc = [[a,s,c,o,f,r,t,e,p,st,cc,l]]
  dc = Scaler.fit_transform(dc)
  predict = model.predict(dc)
  classes = np.argmax(predict, axis = 1)
  return classes

