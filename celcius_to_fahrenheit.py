# -*- coding: utf-8 -*-
"""Celcius_to_fahrenheit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13V3tpPJaOOHqB27HBi366BlLzIFNiOJm
"""

import tensorflow as tf
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

temp_df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Celsius to Fahrenheit.csv')

temp_df.head(5)

temp_df.tail(5)

temp_df.info()

sns.countplot(data = temp_df)

X = temp_df[['Celsius']]
y = temp_df[['Fahrenheit']]

X.shape

y.shape

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()

X_scaled = scaler.fit_transform(X)
y_scaled = scaler.fit_transform(y)

X_train,X_test,y_train,y_test = train_test_split(X_scaled,y_scaled,test_size = 0.2)

model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(units = 3, activation = 'linear', input_shape = [1]))
model.add(tf.keras.layers.Dense(units = 1, activation = 'linear'))

model.summary()

model.compile(optimizer = tf.keras.optimizers.Adam(1), loss = 'mean_squared_error')

from tensorflow.keras.callbacks import EarlyStopping
es = EarlyStopping(patience = 2)
epochs_hist = model.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 50, callbacks = [es])

hist = model.history.history
df = pd.DataFrame(hist)
df.plot()

y_predict = model.predict(X_test)

y_predict

model.save('MODEL.h5')

import pickle
from tensorflow.keras.models import load_model
pickle.dump(scaler, open("SCALER.pkl", "wb"))

MODEL = load_model("MODEL.h5")

temp_exp = {"Celsius": 60}

def return_prediction(MODEL, scaler, sample_json):
  temp = sample_json['Celsius']
  val = [[temp]]
  new_val = scaler.fit_transform(val)
  predict_x = MODEL.predict(new_val)
  Temp_f = (1.8 * predict_x) + 32
  return Temp_f
return_prediction(MODEL, scaler, temp_exp)

